// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Auth Screen Snapshot should render the Auth Screen successfully 1`] = `
<View
  testID="safe-layout"
>
  <View
    testID="header"
  >
    <Text
      testID="header-title"
    />
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        {
          "opacity": 1,
        }
      }
      testID="close-button"
    >
      <RNSVGSvgView
        align="xMidYMid"
        bbHeight={24}
        bbWidth={24}
        fill="none"
        focusable={false}
        height={24}
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          [
            {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            {
              "flex": 0,
              "height": 24,
              "width": 24,
            },
          ]
        }
        vbHeight={24}
        vbWidth={24}
        width={24}
      >
        <RNSVGGroup
          fill={null}
          propList={
            [
              "fill",
            ]
          }
        >
          <RNSVGCircle
            cx="12"
            cy="12"
            fill={
              {
                "payload": 4291940822,
                "type": 0,
              }
            }
            propList={
              [
                "fill",
              ]
            }
            r="9"
          />
          <RNSVGPath
            d="M12 21C10.7574 21 9.59252 20.7641 8.50527 20.2924C7.41803 19.8265 6.46021 19.1793 5.63183 18.3509C4.8092 17.5283 4.16491 16.5762 3.69895 15.4947C3.23298 14.4075 3 13.2426 3 12C3 10.7574 3.23298 9.59252 3.69895 8.50527C4.16491 7.41803 4.8092 6.46309 5.63183 5.64046C6.46021 4.81208 7.41803 4.16491 8.50527 3.69895C9.59252 3.23298 10.7574 3 12 3C13.2426 3 14.4075 3.23298 15.4947 3.69895C16.582 4.16491 17.5369 4.81208 18.3595 5.64046C19.1822 6.46309 19.8265 7.41803 20.2924 8.50527C20.7641 9.59252 21 10.7574 21 12C21 13.2426 20.7641 14.4075 20.2924 15.4947C19.8265 16.5762 19.1822 17.5283 18.3595 18.3509C17.5369 19.1793 16.582 19.8265 15.4947 20.2924C14.4075 20.7641 13.2426 21 12 21ZM9.21285 15.6759C9.47747 15.6759 9.69895 15.5896 9.87728 15.4171L12.0086 13.2771L14.1486 15.4171C14.3154 15.5896 14.5283 15.6759 14.7872 15.6759C15.0403 15.6759 15.2531 15.5896 15.4257 15.4171C15.5983 15.2445 15.6846 15.0316 15.6846 14.7785C15.6846 14.5312 15.5954 14.3241 15.4171 14.1572L13.2685 12.0086L15.4257 9.86002C15.5983 9.68169 15.6846 9.47459 15.6846 9.23873C15.6846 8.98562 15.5983 8.77565 15.4257 8.60882C15.2589 8.43624 15.0518 8.34995 14.8044 8.34995C14.5513 8.34995 14.3384 8.43624 14.1659 8.60882L12.0086 10.7574L9.86002 8.61745C9.68169 8.44487 9.46596 8.35858 9.21285 8.35858C8.96548 8.35858 8.75551 8.44487 8.58293 8.61745C8.41611 8.78428 8.33269 8.99425 8.33269 9.24736C8.33269 9.48322 8.41898 9.68744 8.59156 9.86002L10.7488 12.0086L8.59156 14.1659C8.41898 14.3384 8.33269 14.5427 8.33269 14.7785C8.33269 15.0316 8.41611 15.2445 8.58293 15.4171C8.75551 15.5896 8.96548 15.6759 9.21285 15.6759Z"
            fill={
              {
                "payload": 4278190080,
                "type": 0,
              }
            }
            propList={
              [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
  </View>
  <RCTScrollView
    contentContainerClassName="px-4"
    contentContainerStyle={
      {
        "paddingBottom": 20,
        "paddingTop": 84,
      }
    }
    showsVerticalScrollIndicator={false}
  >
    <View>
      <View
        className="flex-1 justify-center items-center"
      >
        <View
          cachePolicy="memory-disk"
          contentFit="contain"
          source={
            {
              "default": "mocked-test-file",
            }
          }
          style={
            {
              "borderRadius": 75,
              "height": 150,
              "width": 150,
            }
          }
          testID="mocked-image"
          transition={0}
        />
        <View
          className="items-center gap-y-4 mt-6"
        >
          <Text
            allowFontScaling={false}
            className="text-[32px] leading-[38px] font-inter-bold text-text-100"
            maxFontSizeMultiplier={1}
          >
            avox
          </Text>
          <Text
            allowFontScaling={false}
            className="text-[24px] leading-[29px] font-inter-bold text-text-90"
            maxFontSizeMultiplier={1}
          >
            welcomeText
          </Text>
        </View>
      </View>
      <View
        className="mt-8"
      >
        <View
          className="gap-y-4"
        >
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="login-button"
          >
            <Text>
              login
            </Text>
          </View>
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="register-button"
          >
            <Text>
              register
            </Text>
          </View>
        </View>
        <View
          className="flex-row justify-between items-center my-4"
        >
          <View
            className="bg-onPrimary-70 h-0.5 w-2/5"
          />
          <Text
            allowFontScaling={false}
            className="text-[14px] leading-[17px] font-inter-medium text-text-90"
            maxFontSizeMultiplier={1}
          >
            or
          </Text>
          <View
            className="bg-onPrimary-70 h-0.5 w-2/5"
          />
        </View>
        <View
          className="gap-y-4"
        >
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": false,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="google-signin-button"
          >
            <Text>
              signInWithGoogle
            </Text>
          </View>
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": false,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              {
                "opacity": 1,
              }
            }
            testID="apple-signin-button"
          >
            <Text>
              signInWithApple
            </Text>
          </View>
        </View>
        <Text
          allowFontScaling={false}
          className="text-[14px] leading-[17px] font-inter-medium text-center text-text-70 mt-6"
          maxFontSizeMultiplier={1}
        >
          acceptText
        </Text>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
